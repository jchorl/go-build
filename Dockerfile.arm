FROM alpine:3.10 as qemu

ARG QEMU_VERSION=2.9.1-1
ARG QEMU_ARCHS="arm"

RUN apk --update add curl

# Enable non-native runs on amd64 architecture hosts
RUN for i in ${QEMU_ARCHS}; do curl -L https://github.com/multiarch/qemu-user-static/releases/download/v${QEMU_VERSION}/qemu-${i}-static.tar.gz | tar zxvf - -C /usr/bin; done
RUN chmod +x /usr/bin/qemu-*

FROM arm32v7/golang:1.13.7-buster
MAINTAINER Trevor Tao <trevor.tao@arm.com>

ARG MANIFEST_TOOL_VERSION=v0.7.0

# Enable non-native builds of this image on an amd64 hosts.
# This must be the first RUN command in this file!
COPY --from=qemu /usr/bin/qemu-*-static /usr/bin/

# Install bash for the entry script (and because it's generally useful)
# Install curl to download glide
# Install git for fetching Go dependencies
# Install ssh for fetching Go dependencies
# Install mercurial for fetching go dependencies
# Install wget since it's useful for fetching
# Install make for building things
# Install util-linux for column command (used for output formatting).
# Install grep and sed for use in some Makefiles (e.g. pulling versions out of glide.yaml)
# Install clang, libbpf and newer kernel headers for building BPF binaries.
RUN echo 'APT::Default-Release "stable";' > /etc/apt/apt.conf.d/99defaultrelease && \
    echo 'deb     http://ftp.de.debian.org/debian/    buster-backports main contrib non-free' > /etc/apt/sources.list.d/buster-backports.list && \
    apt-get -y update &&  \
    apt-get -y upgrade && \
    apt-get install --no-install-recommends -y -t buster-backports \
        libbpf-dev linux-headers-5.4.0-0.bpo.4-all-armhf  && \
    apt-get install --no-install-recommends -y \
        curl bash git openssh-client mercurial make wget util-linux file grep sed \
        llvm clang binutils file iproute2 \
        ca-certificates gcc libc-dev bsdmainutils strace && \
    rm -rf /var/lib/apt/lists/*

# su-exec is used by the entrypoint script to execute the user's command with the right UID/GID.
# (sudo doesn't work easily in a container.)  The version was current master at the time of writing.
ARG SU_EXEC_VER=212b75144bbc06722fbd7661f651390dc47a43d1
RUN  set -ex; \
     curl -o /sbin/su-exec.c https://raw.githubusercontent.com/ncopa/su-exec/${SU_EXEC_VER}/su-exec.c; \
     gcc -Wall /sbin/su-exec.c -o/sbin/su-exec; \
     chown root:root /sbin/su-exec; \
     chmod 0755 /sbin/su-exec; \
     rm /sbin/su-exec.c

# Disable ssh host key checking
RUN echo 'Host *' >> /etc/ssh/ssh_config \
  && echo '    StrictHostKeyChecking no' >> /etc/ssh/ssh_config

# Disable cgo so that binaries we build will be fully static.
ENV CGO_ENABLED=0

# Recompile the standard library with cgo disabled.  This prevents the standard library from being
# marked stale, causing full rebuilds every time.
RUN go install -v std

# Install glide
RUN go get github.com/Masterminds/glide
ENV GLIDE_HOME /home/user/.glide

# Install dep
RUN go get github.com/golang/dep/cmd/dep

# Install ginkgo CLI tool for running tests
RUN go get github.com/onsi/ginkgo/ginkgo

# Install linting tools.
RUN go get -u gopkg.in/alecthomas/gometalinter.v2
RUN ln -s `which gometalinter.v2` /usr/local/bin/gometalinter
RUN gometalinter --install

# Install license checking tool.
RUN go get github.com/pmezard/licenses

# Install tool to merge coverage reports.
RUN go get github.com/wadey/gocovmerge

# Install CLI tool for working with yaml files
RUN go get github.com/mikefarah/yaml

# Delete all the Go sources that were downloaded, we only rely on the binaries
RUN rm -rf /go/src/*

# Ensure that everything under the GOPATH is writable by everyone
RUN chmod -R 777 $GOPATH

RUN curl -sSL https://github.com/estesp/manifest-tool/releases/download/${MANIFEST_TOOL_VERSION}/manifest-tool-linux-armv7 > manifest-tool && \
    chmod +x manifest-tool && \
    mv manifest-tool /usr/bin/

COPY entrypoint.sh /usr/local/bin/entrypoint.sh
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
